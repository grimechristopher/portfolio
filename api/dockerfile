# Creating multi-stage build for production
FROM node:18-alpine as build
# Install necessary packages for build
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1

ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Set working directory
WORKDIR /opt/
COPY package.json package-lock.json ./

# Install node-gyp globally and project dependencies
RUN npm install -g node-gyp
RUN npm config set fetch-retry-maxtimeout 600000 -g && npm install --only=production

# Add node_modules/.bin to PATH
ENV PATH /opt/node_modules/.bin:$PATH

# Set working directory for the app
WORKDIR /opt/app
COPY . .

# Build the project
RUN npm run build

# Creating final production image
FROM node:18-alpine

# Install necessary runtime packages
RUN apk add --no-cache vips-dev

ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Set working directory
WORKDIR /opt/

# Copy dependencies from build stage
COPY --from=build /opt/node_modules ./node_modules

# Set working directory for the app
WORKDIR /opt/app
COPY --from=build /opt/app ./

# Add node_modules/.bin to PATH
ENV PATH /opt/node_modules/.bin:$PATH

# Ensure the uploads directory exists and has the correct permissions
RUN mkdir -p /opt/app/public&& chown -R node:node /opt/app/public

# Set ownership for the entire app directory
RUN chown -R node:node /opt/app

# Run the application as the node user
USER node

# Expose application port
EXPOSE 1337

# Start the application
CMD ["npm", "run", "start"]
